/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteImport } from './routes/_onboarding'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LeadsIndexRouteImport } from './routes/leads/index'
import { Route as OnboardingSignupRouteImport } from './routes/_onboarding/signup'
import { Route as OnboardingLoginRouteImport } from './routes/_onboarding/login'
import { ServerRoute as ApiLeadsRouteServerRouteImport } from './routes/api/leads/route'
import { ServerRoute as ApiEmbedVisitorServerRouteImport } from './routes/api/embed/visitor'
import { ServerRoute as ApiEmbedValidateServerRouteImport } from './routes/api/embed/validate'
import { ServerRoute as ApiEmbedLeadServerRouteImport } from './routes/api/embed/lead'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const OnboardingRoute = OnboardingRouteImport.update({
  id: '/_onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LeadsIndexRoute = LeadsIndexRouteImport.update({
  id: '/leads/',
  path: '/leads/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingSignupRoute = OnboardingSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => OnboardingRoute,
} as any)
const OnboardingLoginRoute = OnboardingLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => OnboardingRoute,
} as any)
const ApiLeadsRouteServerRoute = ApiLeadsRouteServerRouteImport.update({
  id: '/api/leads',
  path: '/api/leads',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiEmbedVisitorServerRoute = ApiEmbedVisitorServerRouteImport.update({
  id: '/api/embed/visitor',
  path: '/api/embed/visitor',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiEmbedValidateServerRoute = ApiEmbedValidateServerRouteImport.update({
  id: '/api/embed/validate',
  path: '/api/embed/validate',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiEmbedLeadServerRoute = ApiEmbedLeadServerRouteImport.update({
  id: '/api/embed/lead',
  path: '/api/embed/lead',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof OnboardingLoginRoute
  '/signup': typeof OnboardingSignupRoute
  '/leads': typeof LeadsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof OnboardingLoginRoute
  '/signup': typeof OnboardingSignupRoute
  '/leads': typeof LeadsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_onboarding': typeof OnboardingRouteWithChildren
  '/_onboarding/login': typeof OnboardingLoginRoute
  '/_onboarding/signup': typeof OnboardingSignupRoute
  '/leads/': typeof LeadsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/leads'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/leads'
  id:
    | '__root__'
    | '/'
    | '/_onboarding'
    | '/_onboarding/login'
    | '/_onboarding/signup'
    | '/leads/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OnboardingRoute: typeof OnboardingRouteWithChildren
  LeadsIndexRoute: typeof LeadsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/leads': typeof ApiLeadsRouteServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/embed/lead': typeof ApiEmbedLeadServerRoute
  '/api/embed/validate': typeof ApiEmbedValidateServerRoute
  '/api/embed/visitor': typeof ApiEmbedVisitorServerRoute
}
export interface FileServerRoutesByTo {
  '/api/leads': typeof ApiLeadsRouteServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/embed/lead': typeof ApiEmbedLeadServerRoute
  '/api/embed/validate': typeof ApiEmbedValidateServerRoute
  '/api/embed/visitor': typeof ApiEmbedVisitorServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/leads': typeof ApiLeadsRouteServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/embed/lead': typeof ApiEmbedLeadServerRoute
  '/api/embed/validate': typeof ApiEmbedValidateServerRoute
  '/api/embed/visitor': typeof ApiEmbedVisitorServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/leads'
    | '/api/auth/$'
    | '/api/embed/lead'
    | '/api/embed/validate'
    | '/api/embed/visitor'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/leads'
    | '/api/auth/$'
    | '/api/embed/lead'
    | '/api/embed/validate'
    | '/api/embed/visitor'
  id:
    | '__root__'
    | '/api/leads'
    | '/api/auth/$'
    | '/api/embed/lead'
    | '/api/embed/validate'
    | '/api/embed/visitor'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiLeadsRouteServerRoute: typeof ApiLeadsRouteServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiEmbedLeadServerRoute: typeof ApiEmbedLeadServerRoute
  ApiEmbedValidateServerRoute: typeof ApiEmbedValidateServerRoute
  ApiEmbedVisitorServerRoute: typeof ApiEmbedVisitorServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_onboarding': {
      id: '/_onboarding'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leads/': {
      id: '/leads/'
      path: '/leads'
      fullPath: '/leads'
      preLoaderRoute: typeof LeadsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_onboarding/signup': {
      id: '/_onboarding/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof OnboardingSignupRouteImport
      parentRoute: typeof OnboardingRoute
    }
    '/_onboarding/login': {
      id: '/_onboarding/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof OnboardingLoginRouteImport
      parentRoute: typeof OnboardingRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/leads': {
      id: '/api/leads'
      path: '/api/leads'
      fullPath: '/api/leads'
      preLoaderRoute: typeof ApiLeadsRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/embed/visitor': {
      id: '/api/embed/visitor'
      path: '/api/embed/visitor'
      fullPath: '/api/embed/visitor'
      preLoaderRoute: typeof ApiEmbedVisitorServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/embed/validate': {
      id: '/api/embed/validate'
      path: '/api/embed/validate'
      fullPath: '/api/embed/validate'
      preLoaderRoute: typeof ApiEmbedValidateServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/embed/lead': {
      id: '/api/embed/lead'
      path: '/api/embed/lead'
      fullPath: '/api/embed/lead'
      preLoaderRoute: typeof ApiEmbedLeadServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface OnboardingRouteChildren {
  OnboardingLoginRoute: typeof OnboardingLoginRoute
  OnboardingSignupRoute: typeof OnboardingSignupRoute
}

const OnboardingRouteChildren: OnboardingRouteChildren = {
  OnboardingLoginRoute: OnboardingLoginRoute,
  OnboardingSignupRoute: OnboardingSignupRoute,
}

const OnboardingRouteWithChildren = OnboardingRoute._addFileChildren(
  OnboardingRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OnboardingRoute: OnboardingRouteWithChildren,
  LeadsIndexRoute: LeadsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiLeadsRouteServerRoute: ApiLeadsRouteServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiEmbedLeadServerRoute: ApiEmbedLeadServerRoute,
  ApiEmbedValidateServerRoute: ApiEmbedValidateServerRoute,
  ApiEmbedVisitorServerRoute: ApiEmbedVisitorServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
